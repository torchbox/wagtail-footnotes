[tool.black]
line_length = 88
target-version = ["py38"]


[tool.ruff]
target-version = "py38"

extend-select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "DJ", # flake8-django
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "PGH", # pygrep-hooks
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "W",   # pycodestyle warnings
    "YTT",   # flake8-2020
    "UP",  # pyupgrade
    "RUF100",  # unused noqa
]

# Never enforce `E501` (line length violations).
ignore = ["E501"]

[tool.ruff.isort]
known-first-party = ["src"]
lines-between-types = 1
lines-after-imports = 2


[tool.coverage.run]
branch = true
concurrency = ["multiprocessing", "thread"]
parallel = true

source = ["wagtail_footnotes"]
omit = ["**/migrations/*", "tests/*"]

[tool.coverage.paths]
source = ["wagtail_footnotes", ".tox/py*/**/site-packages"]

[tool.coverage.report]
show_missing = true
ignore_errors = true
skip_empty = true
skip_covered = true
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc.)?abstractmethod",

    # Nor complain about type checking
    "if TYPE_CHECKING:",
]
